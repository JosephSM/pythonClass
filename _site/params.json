{"name":"Pythonclass","tagline":"Used for python class","body":"# python class\r\n\r\n\r\nWill be used for sharing code and learning python\r\n\r\n\r\n## An outline for the course\r\n<div>\r\n\t<div style=\"float: left; width: 50%\">\r\n\t\t<ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-1\">Class 1</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#scratch\">Scratch</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#setting-up-python-and-package-managers\">Setting up python</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#nix-operating-systems-such-as-linux-unix-mac-osx\">Linux, Unix or Mac OSX</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#windows\">Windows</a>\r\n                        </li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-1\">Homework</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#text-editor\">Text Editor</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#first-program\">First Program</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-2\">Class 2</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-2\">Reading</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#basics-of-programming\">Basics of programming</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#python\">Python</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#variables\">Variables</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"input-and-output\">Input and Output</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#if-statements\">If Statements</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-2\">Homework</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\t\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-3\">Class 3</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-3\">Reading</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#looping\">Looping</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-3\">Homework</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#names-and-ages\">Names and ages</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#hashtag-triangle\">Hashtag triangle</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-4\">Class 4</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-4\">Reading</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#looping-continued\">Looping continued</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#functions\">Functions</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-4\">Homework</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=#fizzbuzz>FizzBuzz</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#caesar-cipher\">Caesar Cipher</a>\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t<a href=\"#encription\">Encription</a>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t<a href=\"#decription\">Decription</a>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-5\">Class 5</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-5\">Reading</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#recursion\">Recusion</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#lambdas\">Lambdas</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-5\">Homework</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=#tower-of-hanoi>Tower of Hanoi</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#vigenere-cipher\">Vigenere Cipher</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-6\">Class 6</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-6\">Reading</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#fifteen\">Game of fifteen</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#minesweeper\">Game of Minesweeper</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-6\">Homework</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t</ol>\r\n\t</div>\r\n\t<div style=\"float: right; width: 50%\">\r\n\t\t<ol start=\"7\">\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-7\">Class 7</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-7\">Reading</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#sorting\">Sorting</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#bubble-sort\">Bubble Sort</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#merge-sort\">Merge Sort</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#insertion-sort\">Insertion Sort</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#big-o-notation\">Big O Notation</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#upper-bounds-on-mathematical-functions\">Upper bounds on mathematical functions</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#finding-big-o-in-a-program\">Finding Big O in a program</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#searching\">Searching</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#linear-search\">Linear Search</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#binary-search\">Binary Search</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-7\">Homework</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-8\">Class 8</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-8\">Reading</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#data-structures-reading\">Data Structures</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#reading-on-classes\">Classes</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#data-structures\">Data Structures</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#hashing\">Hashing</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#linked-lists\">Linked Lists</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#trees\">Trees</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#queues\">Queues</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#stacks\">Stacks</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#tuples\">Tuples</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#heaps\">Heaps</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#graphs\">Graphs</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#mutability\">Mutability</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#intro-to-classes\">Intro to classes</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-8\">Homework</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-9\">Class 9</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-9\">Reading</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#classes-continued\">Classes Continued</a>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#inheritance\">Inheritance</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#polymorphism\">Polymorphism</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<a href=\"#magic-methods\">Magic Methods</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-9\">Homework</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#class-10\">Class 10</a>\r\n\t\t\t</li>\r\n\t\t\t<ol>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#reading-class-10\">Reading</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#final-project\">Final Project</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#sudoku\">Game of Sudoku</a>\r\n\t\t\t\t</li>\r\n\t\t\t\t<li>\r\n\t\t\t\t\t<a href=\"#homework-class-10\">Homework</a>\r\n\t\t\t\t</li>\r\n\t\t\t</ol>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#python-references\">Python References</a>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<a href=\"#text-editors-and-misc\">Text editors and misc.</a>\r\n\t\t\t</li>\r\n\t\t</ol>\r\n\t</div>\r\n</div>\r\n\r\n### Class 1\r\n1. [Scratch](#scratch)\r\n2. [Setting up python](setting-up-python-and-package-managers)\r\n\t- [Linux, Unix or Mac OSX](#nix-operating-systems-such-as-linux-unix-mac-osx)\r\n\t- [Windows](#windows)\r\n3. [Homework](#homework-class-1)\r\n4. [Text editor](#text-editor)\r\n5. [First program](#first-program)\r\n\r\n#### Scratch \r\nTo start getting our heads to think more programmatically, we will start with scratch, a free software built to learn the ideas behind coding from the great people at MIT. linked [here](https://scratch.mit.edu/).\r\n\r\nTo start, I would advise you to create a project and play around.\r\n\r\nIf you get stuck, MIT put out a couple tutorial videos [here](https://scratch.mit.edu/help/videos/#)\r\n\r\nWhile playing around, it is advised to use blocks from the control section, this will help you create more powerful animations.\r\n\r\n#### Setting up python and package managers\r\n\r\nFor all systems this [tutorial](http://www.tutorialspoint.com/python/python_environment.htm) should come in handy if you get stuck.\r\n\r\n##### *nix operating systems such as linux, unix, mac osx\r\nBefore you start, you may want to read up on a bash primer, or just learn the basic commands.\r\n\r\nhere is a [bash reference](http://ss64.com/bash/). Of course you do not have to know all of them, but some of them you will use more then others, such as: cd, ls, mkdir, find.\r\n\r\nPython usually comes installed on these operating systems. To check, open your applications and search for terminal. Once it is opened type\r\n\r\n```sh\r\npython --version\r\n```\r\nYou should see something like: 2.7.11\r\n\r\nIf not, you can download python [here](https://www.python.org/downloads/)\r\n\r\n\r\nGoogle has put out a setup page for python also, linked [here](https://developers.google.com/edu/python/set-up?hl=en)\r\n\r\nFor mac, a great package manager to have is [homebrew](http://brew.sh/), download and instalation is advised.\r\n##### Windows\r\nBefore you start, we will be using the command line, so reading up on a command line [reference](http://ss64.com/nt/) is advised. You don't need to learn all the commands, just some of the more useful ones (such as cd, dir, find, help, md, move, path)\r\n\r\nYou can test to see if python is install on your machine opening the cmd application and typing: python --version \r\n\r\nif you dont get back a version such as: 2.7.11, then you need to download and install it [here](https://www.python.org/downloads/)\r\n\r\n\r\nGoogle has put out a setup page for python also, linked [here](https://developers.google.com/edu/python/set-up?hl=en)\r\n\r\n##### Text editor\r\n\r\nA text editor is a program that will allow a user to edit text. When you program, you will usually want to use a text editor with a certain text format. For example, when you use microsoft word, the document ends with .doc, you might have seen .pdf, .jpg, .gif or various others, for python we use .py. \r\n\r\nSublime text is a great editor that uses colors and auto complete to make coding easier for the user and better overall experience. You can download it [here](http://www.sublimetext.com/).\r\n\r\n##### First program\r\n\r\nAfter you download sublime (or you can use any text editor) open a new file and save it as: helloworld.py in the documents\r\n\r\nOn the first line write:\r\n\r\n```python\r\nprint(\"Hello World!\")\r\n```\r\n\r\nSave the file and open your terminal/command line. Using your appropriate commands (for windows and *unix use: cd ),\r\nchange into the directory where your file is saved. \r\n\r\nThis: \r\n\r\n```sh\r\ncd documents \r\n```\r\n\r\nShould work, but you might need to use ls/dir to help find the documents folder. Once you changed into the documents directory write:\r\n\r\n```sh\r\npython helloworld.py\r\n```\r\n\r\nWhich if you have done everything correctly, should write to the screen: Hello World!\r\n\r\n#### Homework Class 1\r\n\r\n1. For homework this class, create a scratch project that involves at least three different control blocks, two motion blocks, two event blocks, and two operators blocks.\r\n2. Set up python on your machine\r\n\r\n### Class 2\r\n\r\n1. [Reading](#reading-class-2)\r\n2. [Basics of programming](#basics-of-programming)\r\n\t- [Python](#python)\r\n\t- [Variables](#variables)\r\n\t- [Input and output](#input and output)\r\n\t- [If statements](#if-statements)\r\n3. [Homework](#homework-class-2)\r\n\r\n#### Reading Class 2\r\n\r\nTo be familar with the upcoming section, skim through [this on basic syntax](http://www.tutorialspoint.com/python/python_basic_syntax.htm).\r\n\r\nRead through [this on variable types](http://www.tutorialspoint.com/python/python_variable_types.htm).\r\n\r\nSkim through [this on basic operations](http://www.tutorialspoint.com/python/python_basic_operators.htm).\r\n\r\nRead through [this on decision making](http://www.tutorialspoint.com/python/python_decision_making.htm) carefully.\r\n\r\nWhen we say carefully, we really mean, try to really understand, the better you understand what is going on, the better you will code, and the less you will debug later.\r\n\r\nOptional:\r\n[Math and numbers](http://www.tutorialspoint.com/python/python_numbers.htm)\r\n[Strings](http://www.tutorialspoint.com/python/python_strings.htm)\r\n[Boolean Logic](http://www.i-programmer.info/babbages-bag/235-logic-logic-everything-is-logic.html)\r\n\r\n#### Basics of programming\r\n\r\n##### Python\r\n\r\nPython is a beginner friendly language that has an english-like sytanx. In Python, the interpreter (the thing that will help the computer understand what you are typing) uses spaces or tabs to seperate commands and understand the flow of the program. In other many other languages semicolons and braces ( { } ) are used, or some mixture. You can use semicolons if you'd like, but generally it is not done. Try and stay close to general python coding practices so that others can understand your code better and you will be able to read theirs as well. As you program in Python you will get a better understanding of this.\r\n\r\nTo understand some of the work that is done here, I write \"#\" after code sometimes, there are comments. They are english and ignored by the computer. Read them as an english commenter for the line of code or the code your about to read or just read. \r\n\r\n##### variables\r\nIn python you can create a variable easily as long as you don't name it one of the keywords. You can read about the [keywords here](http://zetcode.com/lang/python/keywords/).\r\n\r\nIf you wanted to put a mathematical expression or a sentence or a mixed list you would do it like this:\r\n\r\n```python\r\nx = 5 + 12 + 24 + 36\r\nsentence = \"I love coding in python\"\r\nmixedList = [5 + 23, 0, \"Coding is fun\", 10.5, \"Hello world!\"]\r\n```\r\n\r\nTo play around with this, open the interpreter (by typing python in your terminal/command line or using an online one [here](https://www.pythonanywhere.com/try-ipython/)) and try it out.\r\n\r\n##### input and output\r\n\r\nIf we want to output, we use 'print', it does not matter about the internals here at this point, for our sake lets use it as a function like so:\r\n\r\n```python\r\nprint(\"Hello World\")\r\n``` \r\n\r\nYou may want to skim through [this](http://www.python-course.eu/input.php) before you continue.\r\n\r\nInput in python is simple but is different depending on your version. If you are using python 2.7 or less than you want to use raw_input() if your using python 3 or above, you want to use input(). In the class folder there is a helpFunctions.py file, you can read through it if you'd like. To get the users name:\r\n\r\n```python\r\nfrom helperFunctions import *\r\nname = getString(\"Please enter a name\")\r\n```\r\nand to print it\r\n\r\n```python\r\nprint(name)\r\n```\r\n\r\nor\r\n\r\n```python\r\nprint(\"Hello \" + name)\r\n```\r\n\r\n##### If statements\r\nIf statements are a logical way to make decisions based on unknown input. We use if statements in our lives all the time. For example, we say \"if I am late, leave without me\", \"If I don't catch the bus, I'll take a cab\". \r\n\r\nIn programming we use if statements as a form of controlling the flow of the program. The sytanx is pretty straightforward, you can read about it [here](https://docs.python.org/2/tutorial/controlflow.html), only the first section is necessary.\r\n\r\nThe syntax, taken from the docs:\r\n\r\n```python\r\nif x < 0:\r\n\tprint('x is negative')\r\nelif x == 0: #else if\r\n\tprint('x is zero')\r\nelif x == 1: #else if\r\n\tprint('x is one')\r\nelse:\r\n\tprint('x is positive and not one') # not less than zero, not zero and not one\r\n```\r\n\r\nthe if statement checks if x is less than zero, if it is it will print: 'x is negative', if it is not and if (else if) x is zero then print: 'x is zero', if it is not and if x is 1, print: 'x is one', else in all other cases, print: 'x is positive and not one'\r\n\r\nThis next example is going to be a bit confusing, I do this, not to confuse you on purpose, but to try and drive home a point.\r\n\r\nThe inside of an if statement need not be a single command, it can be an if statement itself, in fact it can be any number statements, for example:\r\n\r\n```python\r\nx = 25\r\nif x > 10:\r\n\tif x > 30:\r\n\t\tif x > 50:\r\n\t\t\tprint(\"x is really big\")\r\n\t\telse: # 30 < x < 50\r\n\t\t\tprint(\"x is prety big\")\r\n\telse: # 10 < x < 30\r\n\t\tif x > 20: # 20 < x < 30\r\n\t\t\tprint(\"x is big\")\r\n\t\telse: 10 < x < 20\r\n\t\t\tprint(\"x is nicely sized\")\r\nelse: # x < 10\r\n\tprint(\"x is small\")\r\n```\r\n\r\nI agree there are better ways to write this, but this is just an example of how you can nest code for more complicated control flow.\r\n\r\nThe last thing we will do with if statements, is boolean logic. In python if you want to test for multiple conditions in an if statement, you can use keywords like `and` or `or`. They are very useful and can make reading code really easy.\r\n\r\n```python\r\nx = 25\r\n\r\nif 10 <= x and x <= 50: # <= means: less than or equal, similar >= would mean: more than or equal\r\n\tprint(\"x is in the middle\")\r\n # another example:\r\n \r\nif x < 10 or x > 50:\r\n\tprint(\"x is not in the middle\")\r\n```\r\n\r\nA neat cool trick that you can do in python is some regular mathematical inequalities:\r\n\r\n```python\r\nx = 25\r\n\r\nif 20 <= x < 30:\r\n\tprint(\"x is in the twenties\")\r\n\r\n```\r\n\r\nAs a side note, `!=` means not equal.\r\n\r\n#### Homework Class 2\r\n\r\nNow that you know how to get input from the user, you will do some logic on the users input.\r\n\r\n1. ask the user for their name\r\n\t- if they give you name that does not have at least 3 charachters or more than 20, ask one more time.\r\n\t\t- if again they do not give you a good name, don't do anything more, you may use `exit()`\r\n2. If the initial of their first name is before m or m, then tell them \"your first name starts at the beginning of the alphabet\"\r\n3. Otherwise tell the user \"Your first initial starts at the end of the alphabet\"\r\n\r\nHere is some pseudocode to help with your first coding homework:\r\n\r\n```\r\nget name from user\r\nif its less than 3 letters or longer than 20\r\n\tget name from user\r\n\tif name is still less than 3 letters or longer than 20\r\n\t\texit\r\nif initial of first name is between 'a' and 'm'\r\n\tprint(\"your first name starts at the beginning of the alphabet\")\r\nelse\r\n\tprint(\"Your first initial starts at the end of the alphabet\")\r\n```\r\n\r\nYou may use the helperfunctions file. There you can find the functions between(charA, charB) use like:\r\n\r\n```python\r\n'c' in between('a','d') # True\r\n'C' in between('a','d') # True even though it is capitalized\r\n'f' in between('a','d') # False\r\n```\r\n\r\nTo include the between function in your code, on the top of your code write:\r\n\r\n```python\r\nfrom helperFunctions import *\r\n```\r\n\r\nthe \"*\" is a wildcard, like a joker in cards, it tells the computer, I want anything and everything. It is generally better to name the functions you are looking for, this way when you reread your code (or someone reads yours), it will be known why that file/library/module was called in, but for our sake, this is enough. At this stage it is not important for us to delve into the functions that were prepared.\r\n\r\nIf you would like to do it:\r\n\r\n```python\r\nfrom helperFunctions import between\r\n```\r\n\r\nYou may see this done differently online or in other examples, we will talk about importing later as well.\r\n\r\n[This reading on if/else statements](http://www.tutorialspoint.com/python/python_if_else.htm) from the reading section may come in handy.\r\n\r\n### Class 3\r\n\r\n1. [Reading](#reading-class-3)\r\n2. [Loops](#loops)\r\n3. [Homework](#homework-class-3)\r\n\t- [Names and ages](#names-and-ages)\r\n\t- [Hashtag triangle](#hashtag-triangle)\r\n\t\r\n#### Reading Class 3\r\nRead through [this on loops](http://www.tutorialspoint.com/python/python_loops.htm) carefully as well.\r\nSkim through [this on Lists](http://www.tutorialspoint.com/python/python_lists.htm).\r\nSkim through [this on tuples](http://www.tutorialspoint.com/python/python_tuples.htm).\r\nSkim through [this on python dictionaries](http://www.tutorialspoint.com/python/python_dictionary.htm)\r\nSkim through [Control Flow Python](https://docs.python.org/2/tutorial/controlflow.html), as a general rule on this particular page, the closer the section is to the top of the page, the more important it is at this moment.\r\n\r\n#### looping\r\n\r\nIn programmaning, arguably the most important concept is looping. Looping alows the user to write a command one time and tell the computer to run it as many times as possible. For example, on your calender you may repeat an event every thursday, it would be extremely annoying and time consuming if you were to have to manually create the same event for thursday, rather telling the computer one time what your event is and then repeating it every thursday until a set date is fast and convienent.\r\n\r\nIn python there are two main ways to loop, for loops and while loops, you can read more about them [here](https://wiki.python.org/moin/ForLoop).\r\n\r\nA for loop usually has a set start and end, it is used generally when you know the amount of times you want the loop to run.\r\n\r\nA while loop is generally used when you are unsure the amount of times you need the loop to run. For example, you may want a loop to run every day until it rains, here you don't know the amount of days (times) you need it to run, just when to stop.\r\n\r\nThe syntax is simple:\r\n\r\nfor loop:\r\n\r\n```python\r\n\r\n''' program to output the numbers from 1 to 25 '''\r\n\r\nfor x in range(1,26): # this runs from 1 through 26 (not including 26)\r\n\tprint(x) # on every iteration x will be set to the next number and then we print it\r\n\t\r\n```\r\n\r\nwhile loop:\r\n\r\n```python\r\n\r\n''' An infinite loop program, this program will never stop, so if you try to run it, press control-c to stop your computer at some point. '''\r\n\r\nx = 1\r\nwhile True: # meaning run always\r\n\tprint(\"x is now \" + str(x)) # print the current value of x, \r\n\t#need to put x in the str() function so that print understands it, don't worry about that for now \r\n\tx = x + 1 # increment x by 1\r\n\t\r\n```\r\n#### Homework Class 3\r\n\r\n##### Names and ages\r\n\r\nGet 10 names and their assoceated ages from the user, print to the screen: the oldest persion and their age.\r\n\r\n##### Hashtag triangle\r\n\r\nGet a height from the user and print a triangle (using hashtags) to the screen using that height as the number of hashtags on the bottom row. \r\n\r\nFor example if the user enters: 3, the output should be:\r\n<pre>\r\n   #\r\n  ##\r\n ###\r\n</pre>\r\n \r\nIf the user enters 5, the output should be:\r\n<pre>\r\n     #\r\n\t##\r\n   ###\r\n  ####\r\n #####\r\n</pre>\r\nand so on.\r\n\r\nHint: You may want to print the triangle without spaces first. For example, an input of 5 would output:\r\n<pre>\r\n #\r\n ##\r\n ###\r\n ####\r\n #####\r\n</pre>\r\n Once you do this, add the spaces in to finish the project.\r\n \r\n### Class 4\r\n\r\n1. [Reading](#reading-class-4)\r\n2. [Loops](#loops)\r\n3. [Functions](#functions)\r\n4. [Homework](#Homework-class-4)\r\n\t- [FizzBuzz](#fizzbuzz)\r\n\t- [Caesar Cipher](#caesar-cipher)\r\n\t\t- [Encription](#encription)\r\n\t\t- [Decription](#decription)\r\n\r\n#### Reading Class 4\r\n\r\nRead through [this on functions](http://www.tutorialspoint.com/python/python_functions.htm) carefully. This is a very important concept in programming that will really save you a lot of time.\r\n\r\nSkim through [this on modules](http://www.tutorialspoint.com/python/python_modules.htm)\r\n\r\nRead the first answer [on the modulo operator here](http://stackoverflow.com/questions/4432208/how-does-work-in-python) and the syntax in python.\r\n\r\n#### Looping continued\r\n\r\nHere we will dive a bit more into loops and their power. Just a quick refersher on the syntax:\r\n\r\n```python\r\nfor x in range(0,101):\r\n\tprint(x) # will print all numbers from 0 -> 100 (including 100)\r\n\r\nx = 0\r\nwhile True: # will run forever\r\n\tprint(x) \r\n\tx = x + 1\r\n```\r\n\r\nWhile loops have a similar syntax to if statements, but they will run again and again while the condition is true. So if we wanted to make a while loop work like a for loop it would be simple:\r\n\r\n```python\r\n\r\nx = 0\r\nwhile x < 101:\r\n\tprint(x)\r\n\tx = x + 1\r\n```\r\n\r\nIf we look at this, it will work exactly like the for loop above, the loop runs while x is less than 101, on each iteration x is incremented, just like the for loop, and it prints it. Try a couple out in the interpreter.\r\n\r\nJust like if statements, loops can also be nested:\r\n\r\n```python\r\nfor x in range(1,11):\r\n\tprint(x)\r\n\r\nfor x in range(1,11):\r\n\tfor y in range(1,11):\r\n\t\tprint(str(x) + \" * \" + str(y) + \" = \" + str(x*y))\r\n```\r\n\r\nYou don't even have to have static nested loops, you can make them a bit more dynamic:\r\n\r\n```python\r\n\r\nfor x in range(1,11):\r\n\tfor y in range(x,11): #start from x and go to 10 (inclusive)\r\n\t\tprint(str(x) + \" * \" + str(y) + \" = \" + str(x*y))\r\n\r\n```\r\n\r\nIf you'd like to break out of a loop you would you the \"break\" keyword:\r\n\r\n```python\r\n\r\nfor x in range(1,10000000):\r\n\tprint(x)\r\n\tif x == 10:\r\n\t\tbreak\r\n\r\n # or you can use it in a while loop\r\nx = 10\r\nwhile True:\r\n\tprint(x)\r\n\tx = x + 1\r\n\tif x > 25:\r\n\t\tbreak\r\n```\r\n\r\nTry these out and play around with it to get a better feel.\r\n\r\nThe last thing we will do is iterable collections\r\n\r\nif we have a list we can loop through it as well:\r\n\r\n```python\r\n\r\nlistOfItems = [1,2,3,4, \"I like coding\", \"coding is fun\", \"yay\"]\r\nfor item in listOfItems:\r\n\tprint(item)\r\n```\r\n\r\nAs an exercise try to create a list of lists and iterate through every element and print them all.\r\n \r\n#### Functions \r\n\r\nFunctions in programming allow you to write a piece of code once and use it many times. I'm sure you have seen functions before in your math classes, such as sin,cos,tan, ln, log, etc. Even if you havn't dont worry, the concept isn't hard.\r\n\r\nLets create a simple function, one that calculates the number that is bigger, given two numbers.\r\n\r\nWe would take two numbers in and will return to the user the larger number.\r\n\r\n```python\r\ndef largerNumber(firstNumber, secondNumber):\r\n\tif firstNumber > secondNumber:\r\n\t\treturn firstNumber\r\n\telif secondNumber > firstNumber:\r\n\t\treturn secondNumber\r\n\telse: #they are equal\r\n\t\treturn firstNumber #does not matter since they are equal\r\n```\r\n\r\nIn python you use the \"def\" keyword to let the intrepreter know that you are \"def\"-ining a function, you then name it (we named it largerNumber), then you open the parenthesis to allow arguements for the functions, the rest we have seen before.\r\n\r\nTo use it, just call it like other functions we have seen:\r\n\r\n```python\r\n\r\nprint(largerNumber(5,10)) # will print 10\r\n\r\n```\r\n\r\nLet's rewrite some of our previous code in a function so that we can re-use it. Let's print the numbers from 1 through the users input:\r\n\r\n```python\r\n\r\ndef print_from_one_to_the_number(n):\r\n\tfor x in range(1,n+1):\r\n\t\tprint(x)\r\n\t\t\r\nprint_from_one_to_the_number(20)\r\nprint_from_one_to_the_number(30)\r\nprint_from_one_to_the_number(40)\r\n```\r\n\r\nHere we define a function that takes an argument that we use in our for loop, so that our loop is dynamic. Now every time we want to print out the numbers from 1 -> n, just use this one line call.\r\n\r\nNow lets do something a bit more useful, lets start computing, lets sum the numbers from 1 -> 100\r\n\r\n```python\r\ncurrentSum = 0\r\nfor x in range(1,101):\r\n\tcurrentSum = currentSum + x # on each iteration x will change to the next number, we add it to the current sum\r\nprint(currentSum)\r\n```\r\n\r\nNow if we functionize it, we can sum the numbers from 1 -> n\r\n\r\n```python\r\ndef sum_from_one_to_n(n):\r\n\tcurrentSum = 0\r\n\tfor x in range(1,n+1):\r\n\t\tcurrentSum = currentSum + x\r\n\treturn currentSum\r\n```\r\n\r\nNow if we want to sum from a -> b:\r\n\r\n```python\r\ndef sum_from_a_to_b(a,b):\r\n\tcurrentSum = 0\r\n\tfor x in range(a,b+1):\r\n\t\tcurrentSum = currentSum + x\r\n\treturn currentSum\r\n```\r\n\r\nNow that was easy, we know have a function that will sum any amount of numbers, starting from anyplace.\r\n\r\nAs an exercise, try and write a function that sums all the squares (x*x) from a -> b\r\n\r\n#### Homework Class 4\r\n\r\n##### FizzBuzz\r\n\r\nWrite a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”.\r\n\r\nIt will be useful to understand the modulo operator, if statements, and looping.\r\n\r\n##### Caesar Cipher\r\n\r\n\r\nFor this homework we will write a program for the [caesar cipher](https://en.wikipedia.org/wiki/Caesar_cipher). \r\n\r\n###### Encription\r\n\r\nIn the cipher, you will increment each letter by fixed amount (with wrapping so that 'z' + 1 = 'a').\r\n\r\nFor example if the increment is 5 then 'abcde' becomes 'fghij', if the increment is 3 then 'wxyz' becomes 'zabc'\r\n\r\n###### Decription\r\n\r\nIn this assignment you will print out all the possible values that our encripted value could be.\r\n\r\nFor example if our encripted code is 'a' then that code could have come from the entire alphabet.\r\n\r\n'ab' could have come from 'ab','bc','cd','de', etc.\r\n\r\nFor a slightly harder problem, try implemt an algorithm that does not have to check every possibility. \r\n\r\nFor example, if our encripted code is 'z lzm hr z gtlzm' then since we are dealing with the english language, we know that there are only a limited amount of one letter words, decreasing our possibilities to only handful.\r\n\r\n### Class 5\r\n\r\n1. [Reading](#reading-class-5)\r\n2. [Recursion](#recursion)\r\n3. [Lambdas](#lambdas)\r\n4. [Homework](#homework-class-5)\r\n\t- [Tower of Hanoi](#tower-of-hanoi)\r\n\t- [Vigenere Cipher](#vigenere-cipher) \r\n\r\n#### Reading Class 5\r\n\r\nSkim through [this on exceptions](http://www.tutorialspoint.com/python/python_exceptions.htm)\r\nRead through [wiki on tower of hanoi](https://en.wikipedia.org/wiki/Tower_of_Hanoi) as we will be using it a lot this class.\r\n\r\n#### Recursion\r\n\r\nRecursion is the act of a function calling itself. A great example of this is the factorial function in mathematics.\r\n\r\nIn mathematics, n! (pronounced n factorial) is written as n * (n-1)! where 0! = 1! = 1, so \r\n5! = 5 * 4! = 5 * 4 * 3! = 5 * 4 * 3 * 2! = 5 * 4 * 3 * 2 * 1! = 5 * 4 * 2 * 1 = 120\r\n\r\nWhen we write recursive functions, we usually have a base case of when we should stop, and we want to move towards that base case on every interation of the function.\r\n\r\nIf we wanted to write a function to compute a factorial, we would write:\r\n\r\n```python\r\ndef factorial(n):\r\n\tif n == 1: # our base case\r\n\t\treturn 1 # return 1 since 1! = 1\r\n\telse:\r\n\t\treturn n * factorial(n - 1) # n! = n * (n-1)!\r\n```\r\n\r\nAs we see here, we have a base case when we stop (when n = 1) and on each interation n gets closer to the base case, assuming the user enters a positive integer.\r\n\r\n#### Lambdas\r\n\r\nLambdas are anonymous functions, or functions that dont have names, they are used when you want to write short one line functions.\r\n\r\nTo see the usefulness of this, we will expand the concept of arguements in functions, and maybe you've realized this already, but functions can take functions as arguements. Lets look at an example where this would be usefule:\r\n\r\n```python\r\n\r\ndef square(x):\r\n\treturn x*x\r\ndef cube(x):\r\n\treturn x*x*x\r\ndef sum_from_a_to_b(a,b,function):\r\n\tcurrentSum = 0\r\n\tfor x in range(a,b+1):\r\n\t\tcurrentSum = currentSum + function(x)\r\n\treturn currentSum\r\n #now lets use it\r\nprint( sum_from_a_to_b(1,10,square) ) # will print the sum of the squares\r\nprint( sum_from_a_to_b(1,10,cube) )   # will print the sum of the cubes\r\n```\r\n\r\nNow what if we dont want to create a new function like cube that we will only use once, well we can just use a lambda:\r\n\r\n```python\r\n\r\nprint(sum_from_a_to_b(1,10, lambda x: x*x*x) ) #will print the sum of the cubes\r\n\r\n```\r\n#### Homework Class 5\r\n\r\n##### Tower of Hanoi\r\n\r\nIn the tower of hanoi there are three towers with N rings on the first one (in ascending order). The goal of the game is to move all the rings to the middle tower. The rules are simple, you may only move one ring at a time and a ring can only be placed on a ring that is larger than itself.\r\n\r\nOpen up the file for this class and play the game on your terminal/command line to get a feel for the game.\r\n\r\nThen try to implement solve, an algorithm that will win the game automatically for you.\r\n\r\n##### Vigenere Cipher\r\n\r\nIn this cipher our key is not a single number, but rather a word or series of numbers. The code is encripted with by cycling through each letter of the code and key at the same time, using a mini caesar cypher on each letter.\r\n\r\nFor example if our code is 'abc' and our key is '123' then 'a' gets shifted one place, 'b' two and 'c' three, so we get as an output 'bdf'. If our key is shorter than our code we just wrap around and start again. Again 'z' + 1 = 'a'.\r\n\r\nDecripting this algorithm is a bit harder, but not impossible. This problem is a bit more advanced and uses frequency analysis and can be implemented with machine learning.\r\n\r\n### Class 6\r\n\r\n1. [Reading](#reading-class-6)\r\n2. [Fifteen](#fifteen)\r\n3. [Minesweeper](#minesweeper)\r\n4. [Homework](#homework-class-6)\r\n\r\n#### Reading Class 6\r\n\r\nPlay [this](http://migo.sixbit.org/puzzles/fifteen/) game, and get ready to build it.\r\n\r\nRead up on [this](https://en.wikipedia.org/wiki/Microsoft_Minesweeper) classic game and get ready to build a similar version as well.\r\n\r\n#### Fifteen\r\n\r\nThe game of fifteen is an easy one to understand and a bit harder to solve. This week we will implement the game on the console and if your ambitious, I urge you to try to come up with a computer algorithm that will solve the board. Be careful though, many permutations are impossible to solve.\r\n\r\n#### Minesweeper\r\n\r\n#### Homework Class 6\r\n\r\n\r\n\r\n### Class 7\r\n\r\n1. [Reading](#reading-class-7)\r\n2. [Sorting](#sorting)\r\n\t- [Bubble Sort](#bubble-sort)\r\n\t- [Merge Sort](#merge-sort)\r\n\t- [Insertion sort](#insertion-sort)\r\n3. [Big O Notation](#big-o-notation)\r\n\t- [Upper bounds on mathematical functions](#upper-bounds-on-mathematical-functions)\r\n\t- [Finding Big O in a program](#finding-big-o-in-a-program)\r\n4. [Searching](#searching)\r\n\t- [Linear Search](#linear-search)\r\n\t- [Binary Search](#binary-search)\r\n5. [Homework](#homework-class-7)\r\n\t\r\n#### Reading Class 7\r\nRead through these sorting alogrithms: \r\n\t[bubblesort](https://en.wikipedia.org/wiki/Bubble_sort)\r\n\t[merge sort](https://en.wikipedia.org/wiki/Merge_sort)\r\n\t[insertion sort](https://en.wikipedia.org/wiki/Insertion_sort) and some others [here](https://en.wikipedia.org/wiki/Sorting_algorithm#Popular_sorting_algorithms)\r\n\r\n#### Sorting\r\n\r\nTrying to implement these three sorting algorithms yourself would be beneficial. I did not pick these three for any particular reason, there are numerious sorting algorithms, these just happen to be the ones I picked. I encourage you to find algorithms you find easy to understand and even more so, hard to understand, and implement them yourself in Python.\r\n\r\nA good place to look would also be [here](http://www.sorting-algorithms.com)\r\n\r\n##### Bubble sort\r\nYou can watch a clip [here](https://www.youtube.com/watch?v=Ui97-_n5xjo) explaining bubble sort. If you look in the class file, three version have been implemented for bubble sort, it would help to look at them and try to understand what is happening.\r\n\r\n##### Merge sort\r\nYou can watch a clip [here](https://www.youtube.com/watch?v=sWtYJv_YXbo) explaining Merge sort.\r\n\r\n##### Insertion sort\r\nYou can watch a clip [here](https://www.youtube.com/watch?v=TwGb6ohsvUU) explaining Insertion sort.\r\n\r\n#### Big O Notation\r\n\r\nOf the bound notation, Big O is arguably the most important. [Big O](https://en.wikipedia.org/wiki/Big_O_notation) is way to characterize a function and give it an upper bound. This part may get too mathematical for some, so feel free to skim through it, there is no reason to let it slow you down at this point. I do suggest coming back to it at some point as it is asked many interviews. You can skip [here](#finding-big-o-in-a-program) to skip the more mathy part.\r\n\r\n###### Upper bounds on mathematical functions\r\n\r\nTo find an upper bound on a mathematical function you are tring to find the highest value it will reach, given a set of inputs. This can be easy for certain functions and hard for others. For example, given the function: f(x) = x, well we can see that this function is always as big as the input it is given. So we write that this function is O(n), read as: big oh of n, or sometimes just: oh of n. Other functions are a bit tricker, and we won't boggle ourselves down with the nitty gritty details, the internet is full of exercises.\r\n\r\nOne of the more important rules is: O(f(x)) + O(g(x)) = O(max(f,g)). For example, if f(x) = x, and g(x) = x^2, then since g > f for x > 1, then O(f(x)) + O(g(x)) = O(max(f,g)) = O(g(x)) = O(x^2)\r\n\r\nIf your unsure which function will be larger at points, then you need to do some calculus and limits, but this is a bit more advanced then what we will be dealing with.\r\n\r\n###### Finding Big O in a program\r\n\r\nLets look at a couple examples. If we want to find an element in an unsorted list what is the big O? [linear search](#linear-search)\r\n\r\nWell, how many operations would we have to do? The answer obviously depends on the size of the list. \r\n\r\nWe can ask ourselves, in the worst case scenario, what is the largest number of elements in the list we would have to check? Well if the item is not in the list, we would have to check every element, which would O(length of list) or usually written O(n) where n is the size of the input.\r\n\r\nWhat if our list is sorted. Well then it becomes a bit easier, what we do is start at the half way point, if the middle item is larger than the item, then we research the list but only search the first half of the list, otherwise we search the second half of the list. (unless of course we found the item). Well how many searches does this take? In the worst case, the item is not in the list, and we keep halfing until there is only one element left. So the answer to our question is the answer to this question: How many times can we half a number. If you remember from Trigonometry/Algebra 2 the answer is log base 2. Since computers are binary by nature, we use base 2 as our implied base, so we write O(log(n)), read as: \"oh of log n\". Don't worry if you didn't fully get it, most people don't use big O notation on the regular, but it is a concept you should be somewhat familar with.\r\n\r\nNow that we've discussed them, lets code the two examples up:\r\n\r\n#### Searching\r\n\r\n##### Linear Search\r\n\r\nLinear Search is search through a collection of items, one at a time.\r\n\r\n```python\r\ndef linearSearch(listOfItems,item_to_search_for):\r\n\tfor item in listOfItems:\r\n\t\tif item == item_to_search_for\r\n\t\t\treturn True # we found it\r\n\treturn False # if we got this far, that means we never returned true, that means it is not in the list\r\n```\r\n\r\n##### Binary Search\r\n\r\nBinary Search only works on sorted lists. This one will be a specific solution to a integer only list, but you can make a more abstract generalization to the binary search algorithm when we talk more about classes.\r\n\r\n```python\r\ndef binarySearch(listOfNumbers,number):\r\n\tlength = len(listOfNumbers) # get the length of the list\r\n\tif listOfNumbers[length//2] == number: # if the middle element is the one we are looking for, return true \r\n\t\treturn True\r\n\tif length == 1: # if there is only one item in the list and its not the one we are looking for \r\n\t\t\t\t\t# (otherwise we would have returned true one line before this) then return false\r\n\t\treturn False\r\n\telif listOfNumbers[length/2] > number: # if the middle element is greater than our number\r\n\t\treturn binarySearch(listOfNumbers[:length//2], number) # research but only use the first half of the list\r\n\telse: # if its less than number\r\n\t\treturn binarySearch(listOfNumbers[length//2:], number) # research but only use the second half of the list\r\n```\r\n\r\nYou can look and play around with the class file on Binary Search to get a feel for it.\r\n\r\n#### Homework Class 7\r\n\r\n### Class 8\r\n1. [Reading](#reading-class-8)\r\n\t- [Data Structes](#data-structures-reading)\r\n\t- [Classes](#reading-on-classes)\r\n2. [Data Structures](#data-structure)\r\n\t- [Hashing](#hashing)\r\n\t- [Linked Lists](#linked-lists)\r\n\t- [Trees](#trees)\r\n\t- [Queues](#queues)\r\n\t- [Stacks](#stacks)\r\n\t- [Tuples](#tuples)\r\n\t- [Heaps](#heaps)\r\n\t- [Graphs](#graphs)\r\n\t- [Mutability](#mutability)\r\n3. [Intro to classes](#intro-to-classes)\r\n4. [Homework](##homework-class-8)\r\n\r\n#### Reading Class 8\r\n\r\n###### Data Structures reading\r\nYou may want to go back and get a better understanding of [Lists](http://www.tutorialspoint.com/python/python_lists.htm),\r\n[tuples](http://www.tutorialspoint.com/python/python_tuples.htm), [dictionaries](http://www.tutorialspoint.com/python/python_dictionary.htm) in python.\r\n\r\nFurthermore, you should skim through [Linked Lists](https://en.wikipedia.org/wiki/Linked_list) and take a look at some of the data structures [here](https://en.wikipedia.org/wiki/List_of_data_structures) (some are less important than others). In general the most important ones are [arrays](https://en.wikipedia.org/wiki/Array_programming) (in python lists), [hashtables](https://en.wikipedia.org/wiki/Hash_table) (in python dictionaries), [tuples](https://en.wikipedia.org/wiki/Tuple), [linked lists](https://en.wikipedia.org/wiki/Linked_list), [trees](https://en.wikipedia.org/wiki/Tree_(data_structure)) (we will cover in class 9), [Graphs](<https://en.wikipedia.org/wiki/Graph_(abstract_data_type)>), [Stacks](<https://en.wikipedia.org/wiki/Stack_(abstract_data_type)>) (Cover in class 10 in sudoku), and [Heaps](<https://en.wikipedia.org/wiki/Heap_(data_structure)>).\r\n\r\n###### Reading on classes\r\n\r\nThe readings here are more for you to skim, there will be more for next week, this is really a primer.\r\nClasses overview: [tutorialspoint](http://www.tutorialspoint.com/python/python_classes_objects.htm) and [python-course](http://www.python-course.eu/python3_magic_methods.php)\r\n\r\nmagic methods: [rafekettler](http://www.rafekettler.com/magicmethods.html) or [python-course](http://www.python-course.eu/python3_magic_methods.php) works fine.\r\n\r\n#### Data Structures\r\n\r\n##### Hashing\r\n##### Linked Lists\r\n##### Trees\r\n##### Queues\r\n##### Stacks\r\n##### Tuples\r\n##### Heaps\r\n##### Graphs\r\n##### Mutability\r\n\r\n#### Intro to classes\r\n\r\n#### Homework Class 8\r\n\r\nThe homework for this class will be more of a self study then a project. Being able to implement a sorting alogrithm or common data structure is useful but not essential. People have already optimized most data structures and sorting algorithms, so doing it yourself would only be for learning sake. I would suggest you look at the class file and get a better understanding of how classes are creates to create a data structures. Furtheremore I suggest you try and read through the pseudocode for various sorting algorithms on wikiepedia and try to implement them in python. If you get stuck, the internet has the answers.\r\n\r\n### Class 9\r\n\r\n1. [Reading](#reading-class-10)\r\n2. [Classes Continued](#classes-continued)\r\n\t- [Inheritance](#inheritance)\r\n\t- [Polymorphism](#polymorphism)\r\n\t- [Magic Methods](#magic-methods)\r\n3. [Homework](#homework-class-9)\r\n\r\n#### Reading Class 9\r\n#### Classes continued\r\n##### Inheritance\r\n##### Polymorphism\r\n##### Magic Methods\r\n#### Homework Class 9\r\n\r\nSimilar to last week, it is hard to give homework without having you do whats already been done, I think it would be more useful to understand the theory here then the exact implementation. \r\n\r\nAs an aside homework, you can and should start on the final project. There are various options listed below.\r\n### Class 10\r\n\r\n1. [Reading](#reading-class-10)\r\n2. [Final Project](#final-project)\r\n3. [Sudoku](#sudoku)\r\n4. [Homework](#homework-class-10)\r\n\r\n#### Reading Class 10\r\n#### Final Project\r\n1. Brick breaker (using [pygame](http://pygame.org/hifi.html))\r\n2. something with [matplotlib](http://matplotlib.org/)\r\n3. something with [numpy](http://www.numpy.org/)\r\n4. something with [sympy](http://www.sympy.org/en/index.html)\r\n5. [Monte Carlo Simulation](https://en.wikipedia.org/wiki/Monte_Carlo_method)\r\n6. [Greedy algorithms](https://en.wikipedia.org/wiki/Greedy_algorithm) for problems\r\n7. [Backtracking](https://en.wikipedia.org/wiki/Backtracking)\r\n\t- [Sudoku Solver](#sudoku)\r\n\t- [8 Queens Puzzle](https://en.wikipedia.org/wiki/Eight_queens_puzzle)\r\n8. Solve the game of fifteen [or any n^2 - 1 game](http://larc.unt.edu/ian/pubs/saml.pdf) or compliment with [A*](https://en.wikipedia.org/wiki/A*_search_algorithm)\r\n9. [Dijkstra's Algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm) and [Enhanced Iterative-Deepening Search*](http://webdocs.cs.ualberta.ca/~tony/RecentPapers/pami94.pdf)\r\n#### Sudoku\r\n\r\n\r\n#### Homework Class 10\r\n\r\n### Python References\r\n\r\n- [Code Like a Pythonista: Idiomatic Python](http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html)\r\n- [Python documentation 3.5.1](https://docs.python.org/3/)\r\n- [Python documentation 2.7.11](https://docs.python.org/2.7/)\r\n- [tutorialspoint](http://www.tutorialspoint.com/python/)\r\n- [Free Python Books](https://github.com/vhf/free-programming-books/blob/master/free-programming-books.md#python)\r\n\r\n### Text editors and misc.\r\n\r\n- [Sublime Text](http://www.sublimetext.com/)\r\n- [Vim](http://www.vim.org/)\r\n\t- [Vim Tutorial](http://www.openvim.com/sandbox.html)\r\n- [Markdown](https://daringfireball.net/projects/markdown/)\r\n\t- [Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)","google":"UA-73251505-1","note":"Don't delete this file! It's used internally to help with page regeneration."}